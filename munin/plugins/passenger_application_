#!/usr/bin/env ruby
#
# Copyright (C) 2010-2013  Kouhei Sutou <kou@clear-code.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#%# family=auto
#%# capabilities=autoconf suggest

require 'English'
require 'rubygems'

mode = ARGV[0]

@label = ENV["label"]
@pid_file = ENV["pid_file"]
@ruby = ENV["ruby"] || Gem.ruby
passenger_spec = Gem::Specification.find_by_name("passenger")
@passenger_status = passenger_spec.bin_file("passenger-status")

if @label
  parameter_prefix = /\Apassenger_(?:#{@label}_)?application_/
else
  parameter_prefix = /\Apassenger_application_/
end
parameter = File.basename($0).gsub(parameter_prefix, '')
if /_(sessions|processed|uptime)\z/ =~ parameter
  @application = $PREMATCH
  @type = $1
  @application = nil if @application and @application.empty?
else
  @application = @type = nil
end

def passenger_status
  if @pid_file
    unless File.readable?(@pid_file)
      return [false, "PID file isn't readable: #{@pid_file}"]
    end
    pid = File.read(@pid_file).strip
  else
    pid = nil
  end
  result = `#{@ruby} #{@passenger_status} #{pid}`
  [$?.success?, result]
end

def parse_uptime(uptime)
  uptime_in_minutes = 0
  if /\A(?:(?:(\d+)h\s+)?(\d+)m\s+)?(\d+)s\z/ =~ uptime
    hours = $1.to_i
    minutes = $2.to_i
    seconds = $3.to_i
    uptime_in_minutes = minutes + hours * 60
  end
  uptime_in_minutes
end

def extract_application_name(path)
  components = path.split(/#/)
  ignore_components = ["default"]
  while ignore_components.include?(components.last)
    components.pop
  end
  components.pop
end

def parse_result(result)
  sections = {}
  section = nil
  application_name = nil
  result.each_line do |line|
    case line
    when /-+\s+(.+)\s+-+/
      section = $1
      sections[section] = []
    else
      case section
      when "Application groups"
        case line.chomp
        when /\A(.+):\s*\z/
          path = $1
          application_name = extract_application_name(path)
          sections[section] << [application_name, []]
        when /\A\s+\*\s+
                PID:\s+(\d+)\s+
                Sessions:\s+(\d+)\s+
                Processed:\s+(\d+)\s+
                Uptime:\s+(.+)\z/x
          pid = $1.to_i
          sessions = $2.to_i
          processed = $3.to_i
          uptime = parse_uptime($4)
          _application_name, processes = sections[section].last
          processes << {
            :pid => pid,
            :sessions => sessions,
            :processed => processed,
            :uptime => uptime
          }
        end
      end
    end
  end
  sections
end

def extract_applications(result)
  parse_result(result)["Application groups"] || []
end

def extract_application(result)
  extract_applications(result).find do |name, processes|
    name == @application
  end
end

def vlabel
  case @type
  when "sessions"
    "number of processing sessions"
  when "processed"
    "number of processed sessions"
  when "uptime"
    "uptime by minutes"
  else
    "unknown"
  end
end

def config
  success, result = passenger_status
  unless success
    puts result
    exit(false)
  end

  application = extract_application(result)
  if application.nil?
    puts("application doesn't exist: #{@application}: <\n#{result}\n>")
    exit(false)
  end

  if @label
    title = "Passenger: #{@label}: #{@type}: #{@application}"
  else
    title = "Passenger: #{@type}: #{@application}"
  end

  puts(<<-EOC)
graph_title #{title}
graph_category passenger
graph_info Passenger #{@application} #{@type}
graph_vlabel #{vlabel}

EOC
  name, processes = application
  processes.sort_by do |attributes|
    attributes[:pid]
  end.each_with_index do |attributes, i|
    puts("#{@type}#{i}.label #{i} (PID #{attributes[:pid]})")
  end
end

def report
  success, result = passenger_status
  unless success
    puts result
    exit(false)
  end
  application = extract_application(result)
  if application.nil?
    puts("application doesn't exist: #{@application}: <\n#{result}\n>")
    exit(false)
  end

  name, processes = application
  processes.sort_by do |attributes|
    attributes[:pid]
  end.each_with_index do |attributes, i|
    puts("#{@type}#{i}.value #{attributes[@type.to_sym]}")
  end
end

case mode
when "auto", "autoconf", "detect"
  success, result = passenger_status
  if success
    puts "yes"
    exit(true)
  else
    puts "no (#{result})"
    exit(false)
  end
when "suggest"
  success, result = passenger_status
  if success
    applications = extract_applications(result)
    if applications.empty?
      puts("no application: <\n#{result}\n>")
      exit(false)
    else
      applications.each do |application, processes|
        puts "#{application}_sessions"
        puts "#{application}_processed"
        puts "#{application}_uptime"
      end
      exit(true)
    end
  else
    puts result
    exit(false)
  end
else
  if @application.nil?
    puts "no application"
    exit(false)
  end
  if @type.nil?
    puts "no type: #{@application}"
    exit(false)
  end
  case mode
  when "config"
    config
  else
    report
  end
end
